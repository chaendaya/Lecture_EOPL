proc (main)
  let CREATECLO = 1 in
  let CALLCLO = 2 in

  let F0 = 0 in
  let f0 = proc (fvs1)
            let () = fvs1 in
            proc (x2)
                begin send (b, CREATECLO, (4, (x2), a)); ready (proc (clo7) clo7) end in

  let F4 = 4 in
  let f4 = proc (fvs5)
            let (x2) = fvs5 in
            proc (y6)
                -(x2 , y6) in

  let dispatch = proc (fNO)
                    if zero? (-(fNO , 0))
                    then f0
                    else if zero? (-(fNO , 4))
                         then f4
                         else 0 in
  letrec
    mainLoop (msg) = 
        if zero? (-(msg , CREATECLO))
        then ready (createClo)
        else if zero? (-(msg , CALLCLO))
             then ready (callClo)
             else ready (mainLoop)
    
    createClo (msg) =
        let (fNO, fvs, sender) = msg in
        let f = (dispatch fNO) in
        let clo = (f, fvs) in
        begin send (sender, clo); ready (mainLoop) end
    
    callClo (msg) =
        let (clo, arg, sender) = msg in
        let (f, fvs) = clo in
        let ffvs = (f fvs) in
        let ret = (ffvs arg) in
        begin send (sender, ret); ready (mainLoop) end
  in

    let behavioura = proc (self)
                        let CREATECLO = 1 in
                        let CALLCLO = 2 in
                        let F0 = 0 in
                        let f0 = proc (fvs1)
                                    let () = fvs1 in
                                        proc (x2)
                                            begin send (b, CREATECLO, (4, (x2), a)); 
                                                  ready (proc (clo7) clo7) 
                                            end 
                        in
    let F4 = 4 in
    let f4 = proc (fvs5)
                let (x2) = fvs5 in
                    proc (y6)
                        -(x2 , y6) in
    
    let dispatch = proc (fNO)
                    if zero? (-(fNO , 0))
                    then f0
                    else if zero? (-(fNO , 4))
                    then f4
                    else 0 in
    letrec
        mainLoop (msg) = 
            if zero? (-(msg , CREATECLO))
            then ready (createClo)
            else if zero? (-(msg , CALLCLO))
            then ready (callClo)
            else ready (mainLoop)
    
        createClo (msg) =
            let (fNO, fvs, sender) = msg in
            let f = (dispatch fNO) in
            let clo = (f, fvs) in
                begin send (sender, clo); ready (mainLoop) end
    
        callClo (msg) = 
            let (clo, arg, sender) = msg in
            let (f, fvs) = clo in
            let ffvs = (f fvs) in
            let ret = (ffvs arg) in
            begin send (sender, ret); ready (mainLoop) end
  in ready (mainLoop) 
  
  in
    let a = new (behavioura) in
    let behaviourb = proc (self)
                        let CREATECLO = 1 in
                        let CALLCLO = 2 in
                        let F0 = 0 in
                        let f0 = proc (fvs1)
                                    let () = fvs1 in
                                    proc (x2) begin send (b, CREATECLO, (4, (x2), a)); 
                                                    ready (proc (clo7) clo7) 
                                              end in
  let F4 = 4 in
  let f4 = proc (fvs5)
            let (x2) = fvs5 in
            proc (y6) -(x2 , y6) in
  
  let dispatch = proc (fNO)
                    if zero? (-(fNO , 0))
                    then f0
                    else if zero? (-(fNO , 4))
                         then f4
                         else 0 in
  letrec
    mainLoop (msg) = 
        if zero? (-(msg , CREATECLO))
        then ready (createClo)
        else if zero? (-(msg , CALLCLO))
             then ready (callClo)
             else ready (mainLoop)
    
    createClo (msg) =
        let (fNO, fvs, sender) = msg in
        let f = (dispatch fNO) in
        let clo = (f, fvs) in
        begin send (sender, clo); ready (mainLoop) end
    
    callClo (msg) =
        let (clo, arg, sender) = msg in
        let (f, fvs) = clo in
        let ffvs = (f fvs) in
        let ret = (ffvs arg) in
        begin send (sender, ret); ready (mainLoop) end
  
  in ready (mainLoop) 
  
  in
    let b = new (behaviourb) in
    begin send (a, CREATECLO, (0, (), main)); 
          ready (proc (clo3)
                    begin send (a, CALLCLO, (clo3, 1, main)); 
                          ready (proc (ret8)
                                    begin send (b, CALLCLO, (ret8, 2, main)); 
                                          ready (proc (ret9) begin print(ret9); ret9 end) 
                                    end) 
                    end) 
    end