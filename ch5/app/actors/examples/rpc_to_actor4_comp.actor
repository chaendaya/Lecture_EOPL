// ch3:rpc: rpc_to_actor4.rpc
//
// let k= proc a (x)
//         proc b (y)
//             x
// in let s = proc a (f)
//             proc b (g)
//                 proc c (z)
//                     ((f a z) b (g a z))
//     in (((s a k) b k ) c 1) 

proc (main)
  let CREATECLO = 1 in
  let CALLCLO = 2 in
  let F0 = 0 in
  let f0 = proc (fvs1)
  let (a, b) = fvs1 in
  proc (x2)
    log "Proc_Exp b y (Var_Exp x)" begin send (b, CREATECLO, (4, (b, x2), a)); ready (proc (clo7)
clo7) end in
  let F4 = 4 in
  let f4 = proc (fvs5)
  let (b, x2) = fvs5 in
  proc (y6)
    log "Var_Exp x" x2 in
  let F9 = 9 in
  let f9 = proc (fvs10)
  let (a, b, c) = fvs10 in
  proc (f11)
    log "Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))))" begin send (b, CREATECLO, (13, (a, b, c, f11), a)); ready (proc (clo16)
clo16) end in
  let F13 = 13 in
  let f13 = proc (fvs14)
  let (a, b, c, f11) = fvs14 in
  proc (g15)
    log "Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))" begin send (c, CREATECLO, (17, (a, b, c, f11, g15), b)); ready (proc (clo20)
clo20) end in
  let F17 = 17 in
  let f17 = proc (fvs18)
  let (a, b, c, f11, g15) = fvs18 in
  proc (z19)
    log "Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))" log "Call_Exp (Var_Exp f) a (Var_Exp z)" log "Var_Exp f" log "Var_Exp z" begin send (a, CALLCLO, (f11, z19, c)); ready (proc (ret21)
  log "Call_Exp (Var_Exp g) a (Var_Exp z)" log "Var_Exp g" log "Var_Exp z" begin send (a, CALLCLO, (g15, z19, c)); ready (proc (ret22)
begin send (b, CALLCLO, (ret21, ret22, c)); ready (proc (ret23)
ret23) end) end) end in
  let dispatch = proc (fNO)
if zero? (-(fNO , 0))
  then f0
  else if zero? (-(fNO , 4))
    then f4
    else if zero? (-(fNO , 9))
      then f9
      else if zero? (-(fNO , 13))
        then f13
        else if zero? (-(fNO , 17))
          then f17
          else 0 in
  letrec
    mainLoop (msg) = if zero? (-(msg , CREATECLO))
    then ready (createClo)
    else if zero? (-(msg , CALLCLO))
      then ready (callClo)
      else ready (mainLoop)
    createClo (msg) =     let (fNO, fvs, sender) = msg in
    let f = (dispatch fNO) in
    let clo = (f, fvs) in
begin send (sender, clo); ready (mainLoop) end
    callClo (msg) =     let (clo, arg, sender) = msg in
    let (f, fvs) = clo in
    let ffvs = (f fvs) in
    let ret = (ffvs arg) in
begin send (sender, ret); ready (mainLoop) end
  in
    let behavioura = proc (self)
  let CREATECLO = 1 in
  let CALLCLO = 2 in
  let F0 = 0 in
  let f0 = proc (fvs1)
  let (a, b) = fvs1 in
  proc (x2)
    log "Proc_Exp b y (Var_Exp x)" begin send (b, CREATECLO, (4, (b, x2), a)); ready (proc (clo7)
clo7) end in
  let F4 = 4 in
  let f4 = proc (fvs5)
  let (b, x2) = fvs5 in
  proc (y6)
    log "Var_Exp x" x2 in
  let F9 = 9 in
  let f9 = proc (fvs10)
  let (a, b, c) = fvs10 in
  proc (f11)
    log "Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))))" begin send (b, CREATECLO, (13, (a, b, c, f11), a)); ready (proc (clo16)
clo16) end in
  let F13 = 13 in
  let f13 = proc (fvs14)
  let (a, b, c, f11) = fvs14 in
  proc (g15)
    log "Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))" begin send (c, CREATECLO, (17, (a, b, c, f11, g15), b)); ready (proc (clo20)
clo20) end in
  let F17 = 17 in
  let f17 = proc (fvs18)
  let (a, b, c, f11, g15) = fvs18 in
  proc (z19)
    log "Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))" log "Call_Exp (Var_Exp f) a (Var_Exp z)" log "Var_Exp f" log "Var_Exp z" begin send (a, CALLCLO, (f11, z19, c)); ready (proc (ret21)
  log "Call_Exp (Var_Exp g) a (Var_Exp z)" log "Var_Exp g" log "Var_Exp z" begin send (a, CALLCLO, (g15, z19, c)); ready (proc (ret22)
begin send (b, CALLCLO, (ret21, ret22, c)); ready (proc (ret23)
ret23) end) end) end in
  let dispatch = proc (fNO)
if zero? (-(fNO , 0))
  then f0
  else if zero? (-(fNO , 4))
    then f4
    else if zero? (-(fNO , 9))
      then f9
      else if zero? (-(fNO , 13))
        then f13
        else if zero? (-(fNO , 17))
          then f17
          else 0 in
  letrec
    mainLoop (msg) = if zero? (-(msg , CREATECLO))
    then ready (createClo)
    else if zero? (-(msg , CALLCLO))
      then ready (callClo)
      else ready (mainLoop)
    createClo (msg) =     let (fNO, fvs, sender) = msg in
    let f = (dispatch fNO) in
    let clo = (f, fvs) in
begin send (sender, clo); ready (mainLoop) end
    callClo (msg) =     let (clo, arg, sender) = msg in
    let (f, fvs) = clo in
    let ffvs = (f fvs) in
    let ret = (ffvs arg) in
begin send (sender, ret); ready (mainLoop) end
  in
ready (mainLoop) in
    let a = new (behavioura) in
    let behaviourb = proc (self)
  let CREATECLO = 1 in
  let CALLCLO = 2 in
  let F0 = 0 in
  let f0 = proc (fvs1)
  let (a, b) = fvs1 in
  proc (x2)
    log "Proc_Exp b y (Var_Exp x)" begin send (b, CREATECLO, (4, (b, x2), a)); ready (proc (clo7)
clo7) end in
  let F4 = 4 in
  let f4 = proc (fvs5)
  let (b, x2) = fvs5 in
  proc (y6)
    log "Var_Exp x" x2 in
  let F9 = 9 in
  let f9 = proc (fvs10)
  let (a, b, c) = fvs10 in
  proc (f11)
    log "Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))))" begin send (b, CREATECLO, (13, (a, b, c, f11), a)); ready (proc (clo16)
clo16) end in
  let F13 = 13 in
  let f13 = proc (fvs14)
  let (a, b, c, f11) = fvs14 in
  proc (g15)
    log "Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))" begin send (c, CREATECLO, (17, (a, b, c, f11, g15), b)); ready (proc (clo20)
clo20) end in
  let F17 = 17 in
  let f17 = proc (fvs18)
  let (a, b, c, f11, g15) = fvs18 in
  proc (z19)
    log "Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))" log "Call_Exp (Var_Exp f) a (Var_Exp z)" log "Var_Exp f" log "Var_Exp z" begin send (a, CALLCLO, (f11, z19, c)); ready (proc (ret21)
  log "Call_Exp (Var_Exp g) a (Var_Exp z)" log "Var_Exp g" log "Var_Exp z" begin send (a, CALLCLO, (g15, z19, c)); ready (proc (ret22)
begin send (b, CALLCLO, (ret21, ret22, c)); ready (proc (ret23)
ret23) end) end) end in
  let dispatch = proc (fNO)
if zero? (-(fNO , 0))
  then f0
  else if zero? (-(fNO , 4))
    then f4
    else if zero? (-(fNO , 9))
      then f9
      else if zero? (-(fNO , 13))
        then f13
        else if zero? (-(fNO , 17))
          then f17
          else 0 in
  letrec
    mainLoop (msg) = if zero? (-(msg , CREATECLO))
    then ready (createClo)
    else if zero? (-(msg , CALLCLO))
      then ready (callClo)
      else ready (mainLoop)
    createClo (msg) =     let (fNO, fvs, sender) = msg in
    let f = (dispatch fNO) in
    let clo = (f, fvs) in
begin send (sender, clo); ready (mainLoop) end
    callClo (msg) =     let (clo, arg, sender) = msg in
    let (f, fvs) = clo in
    let ffvs = (f fvs) in
    let ret = (ffvs arg) in
begin send (sender, ret); ready (mainLoop) end
  in
ready (mainLoop) in
    let b = new (behaviourb) in
    let behaviourc = proc (self)
  let CREATECLO = 1 in
  let CALLCLO = 2 in
  let F0 = 0 in
  let f0 = proc (fvs1)
  let (a, b) = fvs1 in
  proc (x2)
    log "Proc_Exp b y (Var_Exp x)" begin send (b, CREATECLO, (4, (b, x2), a)); ready (proc (clo7)
clo7) end in
  let F4 = 4 in
  let f4 = proc (fvs5)
  let (b, x2) = fvs5 in
  proc (y6)
    log "Var_Exp x" x2 in
  let F9 = 9 in
  let f9 = proc (fvs10)
  let (a, b, c) = fvs10 in
  proc (f11)
    log "Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))))" begin send (b, CREATECLO, (13, (a, b, c, f11), a)); ready (proc (clo16)
clo16) end in
  let F13 = 13 in
  let f13 = proc (fvs14)
  let (a, b, c, f11) = fvs14 in
  proc (g15)
    log "Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))" begin send (c, CREATECLO, (17, (a, b, c, f11, g15), b)); ready (proc (clo20)
clo20) end in
  let F17 = 17 in
  let f17 = proc (fvs18)
  let (a, b, c, f11, g15) = fvs18 in
  proc (z19)
    log "Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z))" log "Call_Exp (Var_Exp f) a (Var_Exp z)" log "Var_Exp f" log "Var_Exp z" begin send (a, CALLCLO, (f11, z19, c)); ready (proc (ret21)
  log "Call_Exp (Var_Exp g) a (Var_Exp z)" log "Var_Exp g" log "Var_Exp z" begin send (a, CALLCLO, (g15, z19, c)); ready (proc (ret22)
begin send (b, CALLCLO, (ret21, ret22, c)); ready (proc (ret23)
ret23) end) end) end in
  let dispatch = proc (fNO)
if zero? (-(fNO , 0))
  then f0
  else if zero? (-(fNO , 4))
    then f4
    else if zero? (-(fNO , 9))
      then f9
      else if zero? (-(fNO , 13))
        then f13
        else if zero? (-(fNO , 17))
          then f17
          else 0 in
  letrec
    mainLoop (msg) = if zero? (-(msg , CREATECLO))
    then ready (createClo)
    else if zero? (-(msg , CALLCLO))
      then ready (callClo)
      else ready (mainLoop)
    createClo (msg) =     let (fNO, fvs, sender) = msg in
    let f = (dispatch fNO) in
    let clo = (f, fvs) in
begin send (sender, clo); ready (mainLoop) end
    callClo (msg) =     let (clo, arg, sender) = msg in
    let (f, fvs) = clo in
    let ffvs = (f fvs) in
    let ret = (ffvs arg) in
begin send (sender, ret); ready (mainLoop) end
  in
ready (mainLoop) in
    let c = new (behaviourc) in
    log "main" log "Let_Exp k (Proc_Exp a x (Proc_Exp b y (Var_Exp x))) (Let_Exp s (Proc_Exp a f (Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))))) (Call_Exp (Call_Exp (Call_Exp (Var_Exp s) a (Var_Exp k)) b (Var_Exp k)) c (Const_Exp 1)))" log "Proc_Exp a x (Proc_Exp b y (Var_Exp x))" begin send (a, CREATECLO, (0, (a, b), main)); ready (proc (clo3)
  let k8 = clo3 in
  log "Let_Exp s (Proc_Exp a f (Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))))) (Call_Exp (Call_Exp (Call_Exp (Var_Exp s) a (Var_Exp k)) b (Var_Exp k)) c (Const_Exp 1))" log "Proc_Exp a f (Proc_Exp b g (Proc_Exp c z (Call_Exp (Call_Exp (Var_Exp f) a (Var_Exp z)) b (Call_Exp (Var_Exp g) a (Var_Exp z)))))" begin send (a, CREATECLO, (9, (a, b, c), main)); ready (proc (clo12)
  let s24 = clo12 in
  log "Call_Exp (Call_Exp (Call_Exp (Var_Exp s) a (Var_Exp k)) b (Var_Exp k)) c (Const_Exp 1)" log "Call_Exp (Call_Exp (Var_Exp s) a (Var_Exp k)) b (Var_Exp k)" log "Call_Exp (Var_Exp s) a (Var_Exp k)" log "Var_Exp s" log "Var_Exp k" begin send (a, CALLCLO, 
(s24, k8, main)); ready (proc (ret25)
  log "Var_Exp k" begin send (b, CALLCLO, (ret25, k8, main)); ready (proc (ret26)
  log "Const_Exp 1" begin send (c, CALLCLO, (ret26, 1, main)); ready (proc (ret27)
begin print(ret27); ret27 end) end) end) end) end) end