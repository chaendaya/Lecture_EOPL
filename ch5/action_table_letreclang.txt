0	(	Shift 4
0	-	Shift 3
0	identifier	Shift 7
0	if	Shift 6
0	integer_number	Shift 2
0	let	Shift 8
0	letrec	Shift 9
0	proc	Shift 10
0	zero?	Shift 5
1	$	Accept
2	(	Reduce 1
2	)	Reduce 1
2	,	Reduce 1
2	-	Reduce 1
2	else	Reduce 1
2	identifier	Reduce 1
2	if	Reduce 1
2	in	Reduce 1
2	integer_number	Reduce 1
2	let	Reduce 1
2	letrec	Reduce 1
2	proc	Reduce 1
2	then	Reduce 1
2	zero?	Reduce 1
2	$	Reduce 1
3	(	Shift 12
3	integer_number	Shift 11
4	(	Shift 4
4	-	Shift 3
4	identifier	Shift 7
4	if	Shift 6
4	integer_number	Shift 2
4	let	Shift 8
4	letrec	Shift 9
4	proc	Shift 10
4	zero?	Shift 5
5	(	Shift 14
6	(	Shift 4
6	-	Shift 3
6	identifier	Shift 7
6	if	Shift 6
6	integer_number	Shift 2
6	let	Shift 8
6	letrec	Shift 9
6	proc	Shift 10
6	zero?	Shift 5
7	(	Reduce 6
7	)	Reduce 6
7	,	Reduce 6
7	-	Reduce 6
7	else	Reduce 6
7	identifier	Reduce 6
7	if	Reduce 6
7	in	Reduce 6
7	integer_number	Reduce 6
7	let	Reduce 6
7	letrec	Reduce 6
7	proc	Reduce 6
7	then	Reduce 6
7	zero?	Reduce 6
7	$	Reduce 6
8	identifier	Shift 16
9	identifier	Shift 17
10	(	Shift 18
11	(	Reduce 2
11	)	Reduce 2
11	,	Reduce 2
11	-	Reduce 2
11	else	Reduce 2
11	identifier	Reduce 2
11	if	Reduce 2
11	in	Reduce 2
11	integer_number	Reduce 2
11	let	Reduce 2
11	letrec	Reduce 2
11	proc	Reduce 2
11	then	Reduce 2
11	zero?	Reduce 2
11	$	Reduce 2
12	(	Shift 4
12	-	Shift 3
12	identifier	Shift 7
12	if	Shift 6
12	integer_number	Shift 2
12	let	Shift 8
12	letrec	Shift 9
12	proc	Shift 10
12	zero?	Shift 5
13	(	Shift 4
13	-	Shift 3
13	identifier	Shift 7
13	if	Shift 6
13	integer_number	Shift 2
13	let	Shift 8
13	letrec	Shift 9
13	proc	Shift 10
13	zero?	Shift 5
14	(	Shift 4
14	-	Shift 3
14	identifier	Shift 7
14	if	Shift 6
14	integer_number	Shift 2
14	let	Shift 8
14	letrec	Shift 9
14	proc	Shift 10
14	zero?	Shift 5
15	then	Shift 22
16	=	Shift 23
17	(	Shift 24
18	identifier	Shift 25
19	,	Shift 26
20	)	Shift 27
21	)	Shift 28
22	(	Shift 4
22	-	Shift 3
22	identifier	Shift 7
22	if	Shift 6
22	integer_number	Shift 2
22	let	Shift 8
22	letrec	Shift 9
22	proc	Shift 10
22	zero?	Shift 5
23	(	Shift 4
23	-	Shift 3
23	identifier	Shift 7
23	if	Shift 6
23	integer_number	Shift 2
23	let	Shift 8
23	letrec	Shift 9
23	proc	Shift 10
23	zero?	Shift 5
24	identifier	Shift 31
25	)	Shift 32
26	(	Shift 4
26	-	Shift 3
26	identifier	Shift 7
26	if	Shift 6
26	integer_number	Shift 2
26	let	Shift 8
26	letrec	Shift 9
26	proc	Shift 10
26	zero?	Shift 5
27	(	Reduce 10
27	)	Reduce 10
27	,	Reduce 10
27	-	Reduce 10
27	else	Reduce 10
27	identifier	Reduce 10
27	if	Reduce 10
27	in	Reduce 10
27	integer_number	Reduce 10
27	let	Reduce 10
27	letrec	Reduce 10
27	proc	Reduce 10
27	then	Reduce 10
27	zero?	Reduce 10
27	$	Reduce 10
28	(	Reduce 4
28	)	Reduce 4
28	,	Reduce 4
28	-	Reduce 4
28	else	Reduce 4
28	identifier	Reduce 4
28	if	Reduce 4
28	in	Reduce 4
28	integer_number	Reduce 4
28	let	Reduce 4
28	letrec	Reduce 4
28	proc	Reduce 4
28	then	Reduce 4
28	zero?	Reduce 4
28	$	Reduce 4
29	else	Shift 34
30	in	Shift 35
31	)	Shift 36
32	(	Shift 4
32	-	Shift 3
32	identifier	Shift 7
32	if	Shift 6
32	integer_number	Shift 2
32	let	Shift 8
32	letrec	Shift 9
32	proc	Shift 10
32	zero?	Shift 5
33	)	Shift 38
34	(	Shift 4
34	-	Shift 3
34	identifier	Shift 7
34	if	Shift 6
34	integer_number	Shift 2
34	let	Shift 8
34	letrec	Shift 9
34	proc	Shift 10
34	zero?	Shift 5
35	(	Shift 4
35	-	Shift 3
35	identifier	Shift 7
35	if	Shift 6
35	integer_number	Shift 2
35	let	Shift 8
35	letrec	Shift 9
35	proc	Shift 10
35	zero?	Shift 5
36	=	Shift 41
37	(	Reduce 9
37	)	Reduce 9
37	,	Reduce 9
37	-	Reduce 9
37	else	Reduce 9
37	identifier	Reduce 9
37	if	Reduce 9
37	in	Reduce 9
37	integer_number	Reduce 9
37	let	Reduce 9
37	letrec	Reduce 9
37	proc	Reduce 9
37	then	Reduce 9
37	zero?	Reduce 9
37	$	Reduce 9
38	(	Reduce 3
38	)	Reduce 3
38	,	Reduce 3
38	-	Reduce 3
38	else	Reduce 3
38	identifier	Reduce 3
38	if	Reduce 3
38	in	Reduce 3
38	integer_number	Reduce 3
38	let	Reduce 3
38	letrec	Reduce 3
38	proc	Reduce 3
38	then	Reduce 3
38	zero?	Reduce 3
38	$	Reduce 3
39	(	Reduce 5
39	)	Reduce 5
39	,	Reduce 5
39	-	Reduce 5
39	else	Reduce 5
39	identifier	Reduce 5
39	if	Reduce 5
39	in	Reduce 5
39	integer_number	Reduce 5
39	let	Reduce 5
39	letrec	Reduce 5
39	proc	Reduce 5
39	then	Reduce 5
39	zero?	Reduce 5
39	$	Reduce 5
40	(	Reduce 7
40	)	Reduce 7
40	,	Reduce 7
40	-	Reduce 7
40	else	Reduce 7
40	identifier	Reduce 7
40	if	Reduce 7
40	in	Reduce 7
40	integer_number	Reduce 7
40	let	Reduce 7
40	letrec	Reduce 7
40	proc	Reduce 7
40	then	Reduce 7
40	zero?	Reduce 7
40	$	Reduce 7
41	(	Shift 4
41	-	Shift 3
41	identifier	Shift 7
41	if	Shift 6
41	integer_number	Shift 2
41	let	Shift 8
41	letrec	Shift 9
41	proc	Shift 10
41	zero?	Shift 5
42	in	Shift 43
43	(	Shift 4
43	-	Shift 3
43	identifier	Shift 7
43	if	Shift 6
43	integer_number	Shift 2
43	let	Shift 8
43	letrec	Shift 9
43	proc	Shift 10
43	zero?	Shift 5
44	(	Reduce 8
44	)	Reduce 8
44	,	Reduce 8
44	-	Reduce 8
44	else	Reduce 8
44	identifier	Reduce 8
44	if	Reduce 8
44	in	Reduce 8
44	integer_number	Reduce 8
44	let	Reduce 8
44	letrec	Reduce 8
44	proc	Reduce 8
44	then	Reduce 8
44	zero?	Reduce 8
44	$	Reduce 8
