0	(	Shift 4
0	-	Shift 3
0	[	Shift 17
0	begin	Shift 10
0	car	Shift 20
0	cdr	Shift 21
0	identifier	Shift 6
0	if	Shift 5
0	integer_number	Shift 2
0	let	Shift 7
0	letrec	Shift 8
0	mutex	Shift 14
0	null?	Shift 19
0	print	Shift 22
0	proc	Shift 9
0	raise	Shift 24
0	set	Shift 11
0	signal	Shift 16
0	spawn	Shift 12
0	try	Shift 23
0	wait	Shift 15
0	yield	Shift 13
0	zero?	Shift 18
1	$	Accept
2	(	Reduce 1
2	)	Reduce 1
2	,	Reduce 1
2	-	Reduce 1
2	;	Reduce 1
2	[	Reduce 1
2	begin	Reduce 1
2	car	Reduce 1
2	catch	Reduce 1
2	cdr	Reduce 1
2	else	Reduce 1
2	end	Reduce 1
2	identifier	Reduce 1
2	if	Reduce 1
2	in	Reduce 1
2	integer_number	Reduce 1
2	let	Reduce 1
2	letrec	Reduce 1
2	mutex	Reduce 1
2	null?	Reduce 1
2	print	Reduce 1
2	proc	Reduce 1
2	raise	Reduce 1
2	set	Reduce 1
2	signal	Reduce 1
2	spawn	Reduce 1
2	then	Reduce 1
2	try	Reduce 1
2	wait	Reduce 1
2	yield	Reduce 1
2	zero?	Reduce 1
2	$	Reduce 1
3	(	Shift 26
3	integer_number	Shift 25
4	(	Shift 4
4	-	Shift 3
4	[	Shift 17
4	begin	Shift 10
4	car	Shift 20
4	cdr	Shift 21
4	identifier	Shift 6
4	if	Shift 5
4	integer_number	Shift 2
4	let	Shift 7
4	letrec	Shift 8
4	mutex	Shift 14
4	null?	Shift 19
4	print	Shift 22
4	proc	Shift 9
4	raise	Shift 24
4	set	Shift 11
4	signal	Shift 16
4	spawn	Shift 12
4	try	Shift 23
4	wait	Shift 15
4	yield	Shift 13
4	zero?	Shift 18
5	(	Shift 4
5	-	Shift 3
5	[	Shift 17
5	begin	Shift 10
5	car	Shift 20
5	cdr	Shift 21
5	identifier	Shift 6
5	if	Shift 5
5	integer_number	Shift 2
5	let	Shift 7
5	letrec	Shift 8
5	mutex	Shift 14
5	null?	Shift 19
5	print	Shift 22
5	proc	Shift 9
5	raise	Shift 24
5	set	Shift 11
5	signal	Shift 16
5	spawn	Shift 12
5	try	Shift 23
5	wait	Shift 15
5	yield	Shift 13
5	zero?	Shift 18
6	(	Reduce 5
6	)	Reduce 5
6	,	Reduce 5
6	-	Reduce 5
6	;	Reduce 5
6	[	Reduce 5
6	begin	Reduce 5
6	car	Reduce 5
6	catch	Reduce 5
6	cdr	Reduce 5
6	else	Reduce 5
6	end	Reduce 5
6	identifier	Reduce 5
6	if	Reduce 5
6	in	Reduce 5
6	integer_number	Reduce 5
6	let	Reduce 5
6	letrec	Reduce 5
6	mutex	Reduce 5
6	null?	Reduce 5
6	print	Reduce 5
6	proc	Reduce 5
6	raise	Reduce 5
6	set	Reduce 5
6	signal	Reduce 5
6	spawn	Reduce 5
6	then	Reduce 5
6	try	Reduce 5
6	wait	Reduce 5
6	yield	Reduce 5
6	zero?	Reduce 5
6	$	Reduce 5
7	identifier	Shift 29
8	identifier	Shift 30
9	(	Shift 31
10	(	Shift 4
10	-	Shift 3
10	[	Shift 17
10	begin	Shift 10
10	car	Shift 20
10	cdr	Shift 21
10	identifier	Shift 6
10	if	Shift 5
10	integer_number	Shift 2
10	let	Shift 7
10	letrec	Shift 8
10	mutex	Shift 14
10	null?	Shift 19
10	print	Shift 22
10	proc	Shift 9
10	raise	Shift 24
10	set	Shift 11
10	signal	Shift 16
10	spawn	Shift 12
10	try	Shift 23
10	wait	Shift 15
10	yield	Shift 13
10	zero?	Shift 18
11	identifier	Shift 34
12	(	Shift 35
13	(	Shift 36
14	(	Shift 37
15	(	Shift 38
16	(	Shift 39
17	integer_number	Shift 41
18	(	Shift 42
19	(	Shift 43
20	(	Shift 44
21	(	Shift 45
22	(	Shift 46
23	(	Shift 4
23	-	Shift 3
23	[	Shift 17
23	begin	Shift 10
23	car	Shift 20
23	cdr	Shift 21
23	identifier	Shift 6
23	if	Shift 5
23	integer_number	Shift 2
23	let	Shift 7
23	letrec	Shift 8
23	mutex	Shift 14
23	null?	Shift 19
23	print	Shift 22
23	proc	Shift 9
23	raise	Shift 24
23	set	Shift 11
23	signal	Shift 16
23	spawn	Shift 12
23	try	Shift 23
23	wait	Shift 15
23	yield	Shift 13
23	zero?	Shift 18
24	(	Shift 4
24	-	Shift 3
24	[	Shift 17
24	begin	Shift 10
24	car	Shift 20
24	cdr	Shift 21
24	identifier	Shift 6
24	if	Shift 5
24	integer_number	Shift 2
24	let	Shift 7
24	letrec	Shift 8
24	mutex	Shift 14
24	null?	Shift 19
24	print	Shift 22
24	proc	Shift 9
24	raise	Shift 24
24	set	Shift 11
24	signal	Shift 16
24	spawn	Shift 12
24	try	Shift 23
24	wait	Shift 15
24	yield	Shift 13
24	zero?	Shift 18
25	(	Reduce 2
25	)	Reduce 2
25	,	Reduce 2
25	-	Reduce 2
25	;	Reduce 2
25	[	Reduce 2
25	begin	Reduce 2
25	car	Reduce 2
25	catch	Reduce 2
25	cdr	Reduce 2
25	else	Reduce 2
25	end	Reduce 2
25	identifier	Reduce 2
25	if	Reduce 2
25	in	Reduce 2
25	integer_number	Reduce 2
25	let	Reduce 2
25	letrec	Reduce 2
25	mutex	Reduce 2
25	null?	Reduce 2
25	print	Reduce 2
25	proc	Reduce 2
25	raise	Reduce 2
25	set	Reduce 2
25	signal	Reduce 2
25	spawn	Reduce 2
25	then	Reduce 2
25	try	Reduce 2
25	wait	Reduce 2
25	yield	Reduce 2
25	zero?	Reduce 2
25	$	Reduce 2
26	(	Shift 4
26	-	Shift 3
26	[	Shift 17
26	begin	Shift 10
26	car	Shift 20
26	cdr	Shift 21
26	identifier	Shift 6
26	if	Shift 5
26	integer_number	Shift 2
26	let	Shift 7
26	letrec	Shift 8
26	mutex	Shift 14
26	null?	Shift 19
26	print	Shift 22
26	proc	Shift 9
26	raise	Shift 24
26	set	Shift 11
26	signal	Shift 16
26	spawn	Shift 12
26	try	Shift 23
26	wait	Shift 15
26	yield	Shift 13
26	zero?	Shift 18
27	(	Shift 4
27	-	Shift 3
27	[	Shift 17
27	begin	Shift 10
27	car	Shift 20
27	cdr	Shift 21
27	identifier	Shift 6
27	if	Shift 5
27	integer_number	Shift 2
27	let	Shift 7
27	letrec	Shift 8
27	mutex	Shift 14
27	null?	Shift 19
27	print	Shift 22
27	proc	Shift 9
27	raise	Shift 24
27	set	Shift 11
27	signal	Shift 16
27	spawn	Shift 12
27	try	Shift 23
27	wait	Shift 15
27	yield	Shift 13
27	zero?	Shift 18
28	then	Shift 51
29	=	Shift 52
30	(	Shift 53
31	identifier	Shift 54
32	;	Shift 55
32	end	Reduce 11
33	end	Shift 56
34	=	Shift 57
35	(	Shift 4
35	-	Shift 3
35	[	Shift 17
35	begin	Shift 10
35	car	Shift 20
35	cdr	Shift 21
35	identifier	Shift 6
35	if	Shift 5
35	integer_number	Shift 2
35	let	Shift 7
35	letrec	Shift 8
35	mutex	Shift 14
35	null?	Shift 19
35	print	Shift 22
35	proc	Shift 9
35	raise	Shift 24
35	set	Shift 11
35	signal	Shift 16
35	spawn	Shift 12
35	try	Shift 23
35	wait	Shift 15
35	yield	Shift 13
35	zero?	Shift 18
36	)	Shift 59
37	)	Shift 60
38	(	Shift 4
38	-	Shift 3
38	[	Shift 17
38	begin	Shift 10
38	car	Shift 20
38	cdr	Shift 21
38	identifier	Shift 6
38	if	Shift 5
38	integer_number	Shift 2
38	let	Shift 7
38	letrec	Shift 8
38	mutex	Shift 14
38	null?	Shift 19
38	print	Shift 22
38	proc	Shift 9
38	raise	Shift 24
38	set	Shift 11
38	signal	Shift 16
38	spawn	Shift 12
38	try	Shift 23
38	wait	Shift 15
38	yield	Shift 13
38	zero?	Shift 18
39	(	Shift 4
39	-	Shift 3
39	[	Shift 17
39	begin	Shift 10
39	car	Shift 20
39	cdr	Shift 21
39	identifier	Shift 6
39	if	Shift 5
39	integer_number	Shift 2
39	let	Shift 7
39	letrec	Shift 8
39	mutex	Shift 14
39	null?	Shift 19
39	print	Shift 22
39	proc	Shift 9
39	raise	Shift 24
39	set	Shift 11
39	signal	Shift 16
39	spawn	Shift 12
39	try	Shift 23
39	wait	Shift 15
39	yield	Shift 13
39	zero?	Shift 18
40	]	Shift 63
41	,	Shift 64
41	]	Reduce 20
42	(	Shift 4
42	-	Shift 3
42	[	Shift 17
42	begin	Shift 10
42	car	Shift 20
42	cdr	Shift 21
42	identifier	Shift 6
42	if	Shift 5
42	integer_number	Shift 2
42	let	Shift 7
42	letrec	Shift 8
42	mutex	Shift 14
42	null?	Shift 19
42	print	Shift 22
42	proc	Shift 9
42	raise	Shift 24
42	set	Shift 11
42	signal	Shift 16
42	spawn	Shift 12
42	try	Shift 23
42	wait	Shift 15
42	yield	Shift 13
42	zero?	Shift 18
43	(	Shift 4
43	-	Shift 3
43	[	Shift 17
43	begin	Shift 10
43	car	Shift 20
43	cdr	Shift 21
43	identifier	Shift 6
43	if	Shift 5
43	integer_number	Shift 2
43	let	Shift 7
43	letrec	Shift 8
43	mutex	Shift 14
43	null?	Shift 19
43	print	Shift 22
43	proc	Shift 9
43	raise	Shift 24
43	set	Shift 11
43	signal	Shift 16
43	spawn	Shift 12
43	try	Shift 23
43	wait	Shift 15
43	yield	Shift 13
43	zero?	Shift 18
44	(	Shift 4
44	-	Shift 3
44	[	Shift 17
44	begin	Shift 10
44	car	Shift 20
44	cdr	Shift 21
44	identifier	Shift 6
44	if	Shift 5
44	integer_number	Shift 2
44	let	Shift 7
44	letrec	Shift 8
44	mutex	Shift 14
44	null?	Shift 19
44	print	Shift 22
44	proc	Shift 9
44	raise	Shift 24
44	set	Shift 11
44	signal	Shift 16
44	spawn	Shift 12
44	try	Shift 23
44	wait	Shift 15
44	yield	Shift 13
44	zero?	Shift 18
45	(	Shift 4
45	-	Shift 3
45	[	Shift 17
45	begin	Shift 10
45	car	Shift 20
45	cdr	Shift 21
45	identifier	Shift 6
45	if	Shift 5
45	integer_number	Shift 2
45	let	Shift 7
45	letrec	Shift 8
45	mutex	Shift 14
45	null?	Shift 19
45	print	Shift 22
45	proc	Shift 9
45	raise	Shift 24
45	set	Shift 11
45	signal	Shift 16
45	spawn	Shift 12
45	try	Shift 23
45	wait	Shift 15
45	yield	Shift 13
45	zero?	Shift 18
46	(	Shift 4
46	-	Shift 3
46	[	Shift 17
46	begin	Shift 10
46	car	Shift 20
46	cdr	Shift 21
46	identifier	Shift 6
46	if	Shift 5
46	integer_number	Shift 2
46	let	Shift 7
46	letrec	Shift 8
46	mutex	Shift 14
46	null?	Shift 19
46	print	Shift 22
46	proc	Shift 9
46	raise	Shift 24
46	set	Shift 11
46	signal	Shift 16
46	spawn	Shift 12
46	try	Shift 23
46	wait	Shift 15
46	yield	Shift 13
46	zero?	Shift 18
47	catch	Shift 70
48	(	Reduce 28
48	)	Reduce 28
48	,	Reduce 28
48	-	Reduce 28
48	;	Reduce 28
48	[	Reduce 28
48	begin	Reduce 28
48	car	Reduce 28
48	catch	Reduce 28
48	cdr	Reduce 28
48	else	Reduce 28
48	end	Reduce 28
48	identifier	Reduce 28
48	if	Reduce 28
48	in	Reduce 28
48	integer_number	Reduce 28
48	let	Reduce 28
48	letrec	Reduce 28
48	mutex	Reduce 28
48	null?	Reduce 28
48	print	Reduce 28
48	proc	Reduce 28
48	raise	Reduce 28
48	set	Reduce 28
48	signal	Reduce 28
48	spawn	Reduce 28
48	then	Reduce 28
48	try	Reduce 28
48	wait	Reduce 28
48	yield	Reduce 28
48	zero?	Reduce 28
48	$	Reduce 28
49	,	Shift 71
50	)	Shift 72
51	(	Shift 4
51	-	Shift 3
51	[	Shift 17
51	begin	Shift 10
51	car	Shift 20
51	cdr	Shift 21
51	identifier	Shift 6
51	if	Shift 5
51	integer_number	Shift 2
51	let	Shift 7
51	letrec	Shift 8
51	mutex	Shift 14
51	null?	Shift 19
51	print	Shift 22
51	proc	Shift 9
51	raise	Shift 24
51	set	Shift 11
51	signal	Shift 16
51	spawn	Shift 12
51	try	Shift 23
51	wait	Shift 15
51	yield	Shift 13
51	zero?	Shift 18
52	(	Shift 4
52	-	Shift 3
52	[	Shift 17
52	begin	Shift 10
52	car	Shift 20
52	cdr	Shift 21
52	identifier	Shift 6
52	if	Shift 5
52	integer_number	Shift 2
52	let	Shift 7
52	letrec	Shift 8
52	mutex	Shift 14
52	null?	Shift 19
52	print	Shift 22
52	proc	Shift 9
52	raise	Shift 24
52	set	Shift 11
52	signal	Shift 16
52	spawn	Shift 12
52	try	Shift 23
52	wait	Shift 15
52	yield	Shift 13
52	zero?	Shift 18
53	identifier	Shift 75
54	)	Shift 76
55	(	Shift 4
55	-	Shift 3
55	[	Shift 17
55	begin	Shift 10
55	car	Shift 20
55	cdr	Shift 21
55	identifier	Shift 6
55	if	Shift 5
55	integer_number	Shift 2
55	let	Shift 7
55	letrec	Shift 8
55	mutex	Shift 14
55	null?	Shift 19
55	print	Shift 22
55	proc	Shift 9
55	raise	Shift 24
55	set	Shift 11
55	signal	Shift 16
55	spawn	Shift 12
55	try	Shift 23
55	wait	Shift 15
55	yield	Shift 13
55	zero?	Shift 18
56	(	Reduce 10
56	)	Reduce 10
56	,	Reduce 10
56	-	Reduce 10
56	;	Reduce 10
56	[	Reduce 10
56	begin	Reduce 10
56	car	Reduce 10
56	catch	Reduce 10
56	cdr	Reduce 10
56	else	Reduce 10
56	end	Reduce 10
56	identifier	Reduce 10
56	if	Reduce 10
56	in	Reduce 10
56	integer_number	Reduce 10
56	let	Reduce 10
56	letrec	Reduce 10
56	mutex	Reduce 10
56	null?	Reduce 10
56	print	Reduce 10
56	proc	Reduce 10
56	raise	Reduce 10
56	set	Reduce 10
56	signal	Reduce 10
56	spawn	Reduce 10
56	then	Reduce 10
56	try	Reduce 10
56	wait	Reduce 10
56	yield	Reduce 10
56	zero?	Reduce 10
56	$	Reduce 10
57	(	Shift 4
57	-	Shift 3
57	[	Shift 17
57	begin	Shift 10
57	car	Shift 20
57	cdr	Shift 21
57	identifier	Shift 6
57	if	Shift 5
57	integer_number	Shift 2
57	let	Shift 7
57	letrec	Shift 8
57	mutex	Shift 14
57	null?	Shift 19
57	print	Shift 22
57	proc	Shift 9
57	raise	Shift 24
57	set	Shift 11
57	signal	Shift 16
57	spawn	Shift 12
57	try	Shift 23
57	wait	Shift 15
57	yield	Shift 13
57	zero?	Shift 18
58	)	Shift 79
59	(	Reduce 15
59	)	Reduce 15
59	,	Reduce 15
59	-	Reduce 15
59	;	Reduce 15
59	[	Reduce 15
59	begin	Reduce 15
59	car	Reduce 15
59	catch	Reduce 15
59	cdr	Reduce 15
59	else	Reduce 15
59	end	Reduce 15
59	identifier	Reduce 15
59	if	Reduce 15
59	in	Reduce 15
59	integer_number	Reduce 15
59	let	Reduce 15
59	letrec	Reduce 15
59	mutex	Reduce 15
59	null?	Reduce 15
59	print	Reduce 15
59	proc	Reduce 15
59	raise	Reduce 15
59	set	Reduce 15
59	signal	Reduce 15
59	spawn	Reduce 15
59	then	Reduce 15
59	try	Reduce 15
59	wait	Reduce 15
59	yield	Reduce 15
59	zero?	Reduce 15
59	$	Reduce 15
60	(	Reduce 16
60	)	Reduce 16
60	,	Reduce 16
60	-	Reduce 16
60	;	Reduce 16
60	[	Reduce 16
60	begin	Reduce 16
60	car	Reduce 16
60	catch	Reduce 16
60	cdr	Reduce 16
60	else	Reduce 16
60	end	Reduce 16
60	identifier	Reduce 16
60	if	Reduce 16
60	in	Reduce 16
60	integer_number	Reduce 16
60	let	Reduce 16
60	letrec	Reduce 16
60	mutex	Reduce 16
60	null?	Reduce 16
60	print	Reduce 16
60	proc	Reduce 16
60	raise	Reduce 16
60	set	Reduce 16
60	signal	Reduce 16
60	spawn	Reduce 16
60	then	Reduce 16
60	try	Reduce 16
60	wait	Reduce 16
60	yield	Reduce 16
60	zero?	Reduce 16
60	$	Reduce 16
61	)	Shift 80
62	)	Shift 81
63	(	Reduce 19
63	)	Reduce 19
63	,	Reduce 19
63	-	Reduce 19
63	;	Reduce 19
63	[	Reduce 19
63	begin	Reduce 19
63	car	Reduce 19
63	catch	Reduce 19
63	cdr	Reduce 19
63	else	Reduce 19
63	end	Reduce 19
63	identifier	Reduce 19
63	if	Reduce 19
63	in	Reduce 19
63	integer_number	Reduce 19
63	let	Reduce 19
63	letrec	Reduce 19
63	mutex	Reduce 19
63	null?	Reduce 19
63	print	Reduce 19
63	proc	Reduce 19
63	raise	Reduce 19
63	set	Reduce 19
63	signal	Reduce 19
63	spawn	Reduce 19
63	then	Reduce 19
63	try	Reduce 19
63	wait	Reduce 19
63	yield	Reduce 19
63	zero?	Reduce 19
63	$	Reduce 19
64	integer_number	Shift 41
65	)	Shift 83
66	)	Shift 84
67	)	Shift 85
68	)	Shift 86
69	)	Shift 87
70	(	Shift 88
71	(	Shift 4
71	-	Shift 3
71	[	Shift 17
71	begin	Shift 10
71	car	Shift 20
71	cdr	Shift 21
71	identifier	Shift 6
71	if	Shift 5
71	integer_number	Shift 2
71	let	Shift 7
71	letrec	Shift 8
71	mutex	Shift 14
71	null?	Shift 19
71	print	Shift 22
71	proc	Shift 9
71	raise	Shift 24
71	set	Shift 11
71	signal	Shift 16
71	spawn	Shift 12
71	try	Shift 23
71	wait	Shift 15
71	yield	Shift 13
71	zero?	Shift 18
72	(	Reduce 9
72	)	Reduce 9
72	,	Reduce 9
72	-	Reduce 9
72	;	Reduce 9
72	[	Reduce 9
72	begin	Reduce 9
72	car	Reduce 9
72	catch	Reduce 9
72	cdr	Reduce 9
72	else	Reduce 9
72	end	Reduce 9
72	identifier	Reduce 9
72	if	Reduce 9
72	in	Reduce 9
72	integer_number	Reduce 9
72	let	Reduce 9
72	letrec	Reduce 9
72	mutex	Reduce 9
72	null?	Reduce 9
72	print	Reduce 9
72	proc	Reduce 9
72	raise	Reduce 9
72	set	Reduce 9
72	signal	Reduce 9
72	spawn	Reduce 9
72	then	Reduce 9
72	try	Reduce 9
72	wait	Reduce 9
72	yield	Reduce 9
72	zero?	Reduce 9
72	$	Reduce 9
73	else	Shift 90
74	in	Shift 91
75	)	Shift 92
76	(	Shift 4
76	-	Shift 3
76	[	Shift 17
76	begin	Shift 10
76	car	Shift 20
76	cdr	Shift 21
76	identifier	Shift 6
76	if	Shift 5
76	integer_number	Shift 2
76	let	Shift 7
76	letrec	Shift 8
76	mutex	Shift 14
76	null?	Shift 19
76	print	Shift 22
76	proc	Shift 9
76	raise	Shift 24
76	set	Shift 11
76	signal	Shift 16
76	spawn	Shift 12
76	try	Shift 23
76	wait	Shift 15
76	yield	Shift 13
76	zero?	Shift 18
77	end	Reduce 12
78	(	Reduce 13
78	)	Reduce 13
78	,	Reduce 13
78	-	Reduce 13
78	;	Reduce 13
78	[	Reduce 13
78	begin	Reduce 13
78	car	Reduce 13
78	catch	Reduce 13
78	cdr	Reduce 13
78	else	Reduce 13
78	end	Reduce 13
78	identifier	Reduce 13
78	if	Reduce 13
78	in	Reduce 13
78	integer_number	Reduce 13
78	let	Reduce 13
78	letrec	Reduce 13
78	mutex	Reduce 13
78	null?	Reduce 13
78	print	Reduce 13
78	proc	Reduce 13
78	raise	Reduce 13
78	set	Reduce 13
78	signal	Reduce 13
78	spawn	Reduce 13
78	then	Reduce 13
78	try	Reduce 13
78	wait	Reduce 13
78	yield	Reduce 13
78	zero?	Reduce 13
78	$	Reduce 13
79	(	Reduce 14
79	)	Reduce 14
79	,	Reduce 14
79	-	Reduce 14
79	;	Reduce 14
79	[	Reduce 14
79	begin	Reduce 14
79	car	Reduce 14
79	catch	Reduce 14
79	cdr	Reduce 14
79	else	Reduce 14
79	end	Reduce 14
79	identifier	Reduce 14
79	if	Reduce 14
79	in	Reduce 14
79	integer_number	Reduce 14
79	let	Reduce 14
79	letrec	Reduce 14
79	mutex	Reduce 14
79	null?	Reduce 14
79	print	Reduce 14
79	proc	Reduce 14
79	raise	Reduce 14
79	set	Reduce 14
79	signal	Reduce 14
79	spawn	Reduce 14
79	then	Reduce 14
79	try	Reduce 14
79	wait	Reduce 14
79	yield	Reduce 14
79	zero?	Reduce 14
79	$	Reduce 14
80	(	Reduce 17
80	)	Reduce 17
80	,	Reduce 17
80	-	Reduce 17
80	;	Reduce 17
80	[	Reduce 17
80	begin	Reduce 17
80	car	Reduce 17
80	catch	Reduce 17
80	cdr	Reduce 17
80	else	Reduce 17
80	end	Reduce 17
80	identifier	Reduce 17
80	if	Reduce 17
80	in	Reduce 17
80	integer_number	Reduce 17
80	let	Reduce 17
80	letrec	Reduce 17
80	mutex	Reduce 17
80	null?	Reduce 17
80	print	Reduce 17
80	proc	Reduce 17
80	raise	Reduce 17
80	set	Reduce 17
80	signal	Reduce 17
80	spawn	Reduce 17
80	then	Reduce 17
80	try	Reduce 17
80	wait	Reduce 17
80	yield	Reduce 17
80	zero?	Reduce 17
80	$	Reduce 17
81	(	Reduce 18
81	)	Reduce 18
81	,	Reduce 18
81	-	Reduce 18
81	;	Reduce 18
81	[	Reduce 18
81	begin	Reduce 18
81	car	Reduce 18
81	catch	Reduce 18
81	cdr	Reduce 18
81	else	Reduce 18
81	end	Reduce 18
81	identifier	Reduce 18
81	if	Reduce 18
81	in	Reduce 18
81	integer_number	Reduce 18
81	let	Reduce 18
81	letrec	Reduce 18
81	mutex	Reduce 18
81	null?	Reduce 18
81	print	Reduce 18
81	proc	Reduce 18
81	raise	Reduce 18
81	set	Reduce 18
81	signal	Reduce 18
81	spawn	Reduce 18
81	then	Reduce 18
81	try	Reduce 18
81	wait	Reduce 18
81	yield	Reduce 18
81	zero?	Reduce 18
81	$	Reduce 18
82	]	Reduce 21
83	(	Reduce 22
83	)	Reduce 22
83	,	Reduce 22
83	-	Reduce 22
83	;	Reduce 22
83	[	Reduce 22
83	begin	Reduce 22
83	car	Reduce 22
83	catch	Reduce 22
83	cdr	Reduce 22
83	else	Reduce 22
83	end	Reduce 22
83	identifier	Reduce 22
83	if	Reduce 22
83	in	Reduce 22
83	integer_number	Reduce 22
83	let	Reduce 22
83	letrec	Reduce 22
83	mutex	Reduce 22
83	null?	Reduce 22
83	print	Reduce 22
83	proc	Reduce 22
83	raise	Reduce 22
83	set	Reduce 22
83	signal	Reduce 22
83	spawn	Reduce 22
83	then	Reduce 22
83	try	Reduce 22
83	wait	Reduce 22
83	yield	Reduce 22
83	zero?	Reduce 22
83	$	Reduce 22
84	(	Reduce 23
84	)	Reduce 23
84	,	Reduce 23
84	-	Reduce 23
84	;	Reduce 23
84	[	Reduce 23
84	begin	Reduce 23
84	car	Reduce 23
84	catch	Reduce 23
84	cdr	Reduce 23
84	else	Reduce 23
84	end	Reduce 23
84	identifier	Reduce 23
84	if	Reduce 23
84	in	Reduce 23
84	integer_number	Reduce 23
84	let	Reduce 23
84	letrec	Reduce 23
84	mutex	Reduce 23
84	null?	Reduce 23
84	print	Reduce 23
84	proc	Reduce 23
84	raise	Reduce 23
84	set	Reduce 23
84	signal	Reduce 23
84	spawn	Reduce 23
84	then	Reduce 23
84	try	Reduce 23
84	wait	Reduce 23
84	yield	Reduce 23
84	zero?	Reduce 23
84	$	Reduce 23
85	(	Reduce 24
85	)	Reduce 24
85	,	Reduce 24
85	-	Reduce 24
85	;	Reduce 24
85	[	Reduce 24
85	begin	Reduce 24
85	car	Reduce 24
85	catch	Reduce 24
85	cdr	Reduce 24
85	else	Reduce 24
85	end	Reduce 24
85	identifier	Reduce 24
85	if	Reduce 24
85	in	Reduce 24
85	integer_number	Reduce 24
85	let	Reduce 24
85	letrec	Reduce 24
85	mutex	Reduce 24
85	null?	Reduce 24
85	print	Reduce 24
85	proc	Reduce 24
85	raise	Reduce 24
85	set	Reduce 24
85	signal	Reduce 24
85	spawn	Reduce 24
85	then	Reduce 24
85	try	Reduce 24
85	wait	Reduce 24
85	yield	Reduce 24
85	zero?	Reduce 24
85	$	Reduce 24
86	(	Reduce 25
86	)	Reduce 25
86	,	Reduce 25
86	-	Reduce 25
86	;	Reduce 25
86	[	Reduce 25
86	begin	Reduce 25
86	car	Reduce 25
86	catch	Reduce 25
86	cdr	Reduce 25
86	else	Reduce 25
86	end	Reduce 25
86	identifier	Reduce 25
86	if	Reduce 25
86	in	Reduce 25
86	integer_number	Reduce 25
86	let	Reduce 25
86	letrec	Reduce 25
86	mutex	Reduce 25
86	null?	Reduce 25
86	print	Reduce 25
86	proc	Reduce 25
86	raise	Reduce 25
86	set	Reduce 25
86	signal	Reduce 25
86	spawn	Reduce 25
86	then	Reduce 25
86	try	Reduce 25
86	wait	Reduce 25
86	yield	Reduce 25
86	zero?	Reduce 25
86	$	Reduce 25
87	(	Reduce 26
87	)	Reduce 26
87	,	Reduce 26
87	-	Reduce 26
87	;	Reduce 26
87	[	Reduce 26
87	begin	Reduce 26
87	car	Reduce 26
87	catch	Reduce 26
87	cdr	Reduce 26
87	else	Reduce 26
87	end	Reduce 26
87	identifier	Reduce 26
87	if	Reduce 26
87	in	Reduce 26
87	integer_number	Reduce 26
87	let	Reduce 26
87	letrec	Reduce 26
87	mutex	Reduce 26
87	null?	Reduce 26
87	print	Reduce 26
87	proc	Reduce 26
87	raise	Reduce 26
87	set	Reduce 26
87	signal	Reduce 26
87	spawn	Reduce 26
87	then	Reduce 26
87	try	Reduce 26
87	wait	Reduce 26
87	yield	Reduce 26
87	zero?	Reduce 26
87	$	Reduce 26
88	identifier	Shift 94
89	)	Shift 95
90	(	Shift 4
90	-	Shift 3
90	[	Shift 17
90	begin	Shift 10
90	car	Shift 20
90	cdr	Shift 21
90	identifier	Shift 6
90	if	Shift 5
90	integer_number	Shift 2
90	let	Shift 7
90	letrec	Shift 8
90	mutex	Shift 14
90	null?	Shift 19
90	print	Shift 22
90	proc	Shift 9
90	raise	Shift 24
90	set	Shift 11
90	signal	Shift 16
90	spawn	Shift 12
90	try	Shift 23
90	wait	Shift 15
90	yield	Shift 13
90	zero?	Shift 18
91	(	Shift 4
91	-	Shift 3
91	[	Shift 17
91	begin	Shift 10
91	car	Shift 20
91	cdr	Shift 21
91	identifier	Shift 6
91	if	Shift 5
91	integer_number	Shift 2
91	let	Shift 7
91	letrec	Shift 8
91	mutex	Shift 14
91	null?	Shift 19
91	print	Shift 22
91	proc	Shift 9
91	raise	Shift 24
91	set	Shift 11
91	signal	Shift 16
91	spawn	Shift 12
91	try	Shift 23
91	wait	Shift 15
91	yield	Shift 13
91	zero?	Shift 18
92	=	Shift 98
93	(	Reduce 8
93	)	Reduce 8
93	,	Reduce 8
93	-	Reduce 8
93	;	Reduce 8
93	[	Reduce 8
93	begin	Reduce 8
93	car	Reduce 8
93	catch	Reduce 8
93	cdr	Reduce 8
93	else	Reduce 8
93	end	Reduce 8
93	identifier	Reduce 8
93	if	Reduce 8
93	in	Reduce 8
93	integer_number	Reduce 8
93	let	Reduce 8
93	letrec	Reduce 8
93	mutex	Reduce 8
93	null?	Reduce 8
93	print	Reduce 8
93	proc	Reduce 8
93	raise	Reduce 8
93	set	Reduce 8
93	signal	Reduce 8
93	spawn	Reduce 8
93	then	Reduce 8
93	try	Reduce 8
93	wait	Reduce 8
93	yield	Reduce 8
93	zero?	Reduce 8
93	$	Reduce 8
94	)	Shift 99
95	(	Reduce 3
95	)	Reduce 3
95	,	Reduce 3
95	-	Reduce 3
95	;	Reduce 3
95	[	Reduce 3
95	begin	Reduce 3
95	car	Reduce 3
95	catch	Reduce 3
95	cdr	Reduce 3
95	else	Reduce 3
95	end	Reduce 3
95	identifier	Reduce 3
95	if	Reduce 3
95	in	Reduce 3
95	integer_number	Reduce 3
95	let	Reduce 3
95	letrec	Reduce 3
95	mutex	Reduce 3
95	null?	Reduce 3
95	print	Reduce 3
95	proc	Reduce 3
95	raise	Reduce 3
95	set	Reduce 3
95	signal	Reduce 3
95	spawn	Reduce 3
95	then	Reduce 3
95	try	Reduce 3
95	wait	Reduce 3
95	yield	Reduce 3
95	zero?	Reduce 3
95	$	Reduce 3
96	(	Reduce 4
96	)	Reduce 4
96	,	Reduce 4
96	-	Reduce 4
96	;	Reduce 4
96	[	Reduce 4
96	begin	Reduce 4
96	car	Reduce 4
96	catch	Reduce 4
96	cdr	Reduce 4
96	else	Reduce 4
96	end	Reduce 4
96	identifier	Reduce 4
96	if	Reduce 4
96	in	Reduce 4
96	integer_number	Reduce 4
96	let	Reduce 4
96	letrec	Reduce 4
96	mutex	Reduce 4
96	null?	Reduce 4
96	print	Reduce 4
96	proc	Reduce 4
96	raise	Reduce 4
96	set	Reduce 4
96	signal	Reduce 4
96	spawn	Reduce 4
96	then	Reduce 4
96	try	Reduce 4
96	wait	Reduce 4
96	yield	Reduce 4
96	zero?	Reduce 4
96	$	Reduce 4
97	(	Reduce 6
97	)	Reduce 6
97	,	Reduce 6
97	-	Reduce 6
97	;	Reduce 6
97	[	Reduce 6
97	begin	Reduce 6
97	car	Reduce 6
97	catch	Reduce 6
97	cdr	Reduce 6
97	else	Reduce 6
97	end	Reduce 6
97	identifier	Reduce 6
97	if	Reduce 6
97	in	Reduce 6
97	integer_number	Reduce 6
97	let	Reduce 6
97	letrec	Reduce 6
97	mutex	Reduce 6
97	null?	Reduce 6
97	print	Reduce 6
97	proc	Reduce 6
97	raise	Reduce 6
97	set	Reduce 6
97	signal	Reduce 6
97	spawn	Reduce 6
97	then	Reduce 6
97	try	Reduce 6
97	wait	Reduce 6
97	yield	Reduce 6
97	zero?	Reduce 6
97	$	Reduce 6
98	(	Shift 4
98	-	Shift 3
98	[	Shift 17
98	begin	Shift 10
98	car	Shift 20
98	cdr	Shift 21
98	identifier	Shift 6
98	if	Shift 5
98	integer_number	Shift 2
98	let	Shift 7
98	letrec	Shift 8
98	mutex	Shift 14
98	null?	Shift 19
98	print	Shift 22
98	proc	Shift 9
98	raise	Shift 24
98	set	Shift 11
98	signal	Shift 16
98	spawn	Shift 12
98	try	Shift 23
98	wait	Shift 15
98	yield	Shift 13
98	zero?	Shift 18
99	(	Shift 4
99	-	Shift 3
99	[	Shift 17
99	begin	Shift 10
99	car	Shift 20
99	cdr	Shift 21
99	identifier	Shift 6
99	if	Shift 5
99	integer_number	Shift 2
99	let	Shift 7
99	letrec	Shift 8
99	mutex	Shift 14
99	null?	Shift 19
99	print	Shift 22
99	proc	Shift 9
99	raise	Shift 24
99	set	Shift 11
99	signal	Shift 16
99	spawn	Shift 12
99	try	Shift 23
99	wait	Shift 15
99	yield	Shift 13
99	zero?	Shift 18
100	in	Shift 102
101	(	Reduce 27
101	)	Reduce 27
101	,	Reduce 27
101	-	Reduce 27
101	;	Reduce 27
101	[	Reduce 27
101	begin	Reduce 27
101	car	Reduce 27
101	catch	Reduce 27
101	cdr	Reduce 27
101	else	Reduce 27
101	end	Reduce 27
101	identifier	Reduce 27
101	if	Reduce 27
101	in	Reduce 27
101	integer_number	Reduce 27
101	let	Reduce 27
101	letrec	Reduce 27
101	mutex	Reduce 27
101	null?	Reduce 27
101	print	Reduce 27
101	proc	Reduce 27
101	raise	Reduce 27
101	set	Reduce 27
101	signal	Reduce 27
101	spawn	Reduce 27
101	then	Reduce 27
101	try	Reduce 27
101	wait	Reduce 27
101	yield	Reduce 27
101	zero?	Reduce 27
101	$	Reduce 27
102	(	Shift 4
102	-	Shift 3
102	[	Shift 17
102	begin	Shift 10
102	car	Shift 20
102	cdr	Shift 21
102	identifier	Shift 6
102	if	Shift 5
102	integer_number	Shift 2
102	let	Shift 7
102	letrec	Shift 8
102	mutex	Shift 14
102	null?	Shift 19
102	print	Shift 22
102	proc	Shift 9
102	raise	Shift 24
102	set	Shift 11
102	signal	Shift 16
102	spawn	Shift 12
102	try	Shift 23
102	wait	Shift 15
102	yield	Shift 13
102	zero?	Shift 18
103	(	Reduce 7
103	)	Reduce 7
103	,	Reduce 7
103	-	Reduce 7
103	;	Reduce 7
103	[	Reduce 7
103	begin	Reduce 7
103	car	Reduce 7
103	catch	Reduce 7
103	cdr	Reduce 7
103	else	Reduce 7
103	end	Reduce 7
103	identifier	Reduce 7
103	if	Reduce 7
103	in	Reduce 7
103	integer_number	Reduce 7
103	let	Reduce 7
103	letrec	Reduce 7
103	mutex	Reduce 7
103	null?	Reduce 7
103	print	Reduce 7
103	proc	Reduce 7
103	raise	Reduce 7
103	set	Reduce 7
103	signal	Reduce 7
103	spawn	Reduce 7
103	then	Reduce 7
103	try	Reduce 7
103	wait	Reduce 7
103	yield	Reduce 7
103	zero?	Reduce 7
103	$	Reduce 7
