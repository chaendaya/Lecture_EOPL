0	(	Shift 4
0	-	Shift 3
0	car	Shift 13
0	cdr	Shift 14
0	identifier	Shift 6
0	if	Shift 5
0	integer_number	Shift 2
0	let	Shift 7
0	letrec	Shift 8
0	list	Shift 10
0	null?	Shift 12
0	proc	Shift 9
0	raise	Shift 16
0	try	Shift 15
0	zero?	Shift 11
1	$	Accept
2	(	Reduce 1
2	)	Reduce 1
2	,	Reduce 1
2	-	Reduce 1
2	car	Reduce 1
2	catch	Reduce 1
2	cdr	Reduce 1
2	else	Reduce 1
2	identifier	Reduce 1
2	if	Reduce 1
2	in	Reduce 1
2	integer_number	Reduce 1
2	let	Reduce 1
2	letrec	Reduce 1
2	list	Reduce 1
2	null?	Reduce 1
2	proc	Reduce 1
2	raise	Reduce 1
2	then	Reduce 1
2	try	Reduce 1
2	zero?	Reduce 1
2	$	Reduce 1
3	(	Shift 18
3	integer_number	Shift 17
4	(	Shift 4
4	-	Shift 3
4	car	Shift 13
4	cdr	Shift 14
4	identifier	Shift 6
4	if	Shift 5
4	integer_number	Shift 2
4	let	Shift 7
4	letrec	Shift 8
4	list	Shift 10
4	null?	Shift 12
4	proc	Shift 9
4	raise	Shift 16
4	try	Shift 15
4	zero?	Shift 11
5	(	Shift 4
5	-	Shift 3
5	car	Shift 13
5	cdr	Shift 14
5	identifier	Shift 6
5	if	Shift 5
5	integer_number	Shift 2
5	let	Shift 7
5	letrec	Shift 8
5	list	Shift 10
5	null?	Shift 12
5	proc	Shift 9
5	raise	Shift 16
5	try	Shift 15
5	zero?	Shift 11
6	(	Reduce 5
6	)	Reduce 5
6	,	Reduce 5
6	-	Reduce 5
6	car	Reduce 5
6	catch	Reduce 5
6	cdr	Reduce 5
6	else	Reduce 5
6	identifier	Reduce 5
6	if	Reduce 5
6	in	Reduce 5
6	integer_number	Reduce 5
6	let	Reduce 5
6	letrec	Reduce 5
6	list	Reduce 5
6	null?	Reduce 5
6	proc	Reduce 5
6	raise	Reduce 5
6	then	Reduce 5
6	try	Reduce 5
6	zero?	Reduce 5
6	$	Reduce 5
7	identifier	Shift 21
8	identifier	Shift 22
9	(	Shift 23
10	(	Shift 24
11	(	Shift 25
12	(	Shift 26
13	(	Shift 27
14	(	Shift 28
15	(	Shift 4
15	-	Shift 3
15	car	Shift 13
15	cdr	Shift 14
15	identifier	Shift 6
15	if	Shift 5
15	integer_number	Shift 2
15	let	Shift 7
15	letrec	Shift 8
15	list	Shift 10
15	null?	Shift 12
15	proc	Shift 9
15	raise	Shift 16
15	try	Shift 15
15	zero?	Shift 11
16	(	Shift 4
16	-	Shift 3
16	car	Shift 13
16	cdr	Shift 14
16	identifier	Shift 6
16	if	Shift 5
16	integer_number	Shift 2
16	let	Shift 7
16	letrec	Shift 8
16	list	Shift 10
16	null?	Shift 12
16	proc	Shift 9
16	raise	Shift 16
16	try	Shift 15
16	zero?	Shift 11
17	(	Reduce 2
17	)	Reduce 2
17	,	Reduce 2
17	-	Reduce 2
17	car	Reduce 2
17	catch	Reduce 2
17	cdr	Reduce 2
17	else	Reduce 2
17	identifier	Reduce 2
17	if	Reduce 2
17	in	Reduce 2
17	integer_number	Reduce 2
17	let	Reduce 2
17	letrec	Reduce 2
17	list	Reduce 2
17	null?	Reduce 2
17	proc	Reduce 2
17	raise	Reduce 2
17	then	Reduce 2
17	try	Reduce 2
17	zero?	Reduce 2
17	$	Reduce 2
18	(	Shift 4
18	-	Shift 3
18	car	Shift 13
18	cdr	Shift 14
18	identifier	Shift 6
18	if	Shift 5
18	integer_number	Shift 2
18	let	Shift 7
18	letrec	Shift 8
18	list	Shift 10
18	null?	Shift 12
18	proc	Shift 9
18	raise	Shift 16
18	try	Shift 15
18	zero?	Shift 11
19	(	Shift 4
19	-	Shift 3
19	car	Shift 13
19	cdr	Shift 14
19	identifier	Shift 6
19	if	Shift 5
19	integer_number	Shift 2
19	let	Shift 7
19	letrec	Shift 8
19	list	Shift 10
19	null?	Shift 12
19	proc	Shift 9
19	raise	Shift 16
19	try	Shift 15
19	zero?	Shift 11
20	then	Shift 33
21	=	Shift 34
22	(	Shift 35
23	identifier	Shift 36
24	integer_number	Shift 38
25	(	Shift 4
25	-	Shift 3
25	car	Shift 13
25	cdr	Shift 14
25	identifier	Shift 6
25	if	Shift 5
25	integer_number	Shift 2
25	let	Shift 7
25	letrec	Shift 8
25	list	Shift 10
25	null?	Shift 12
25	proc	Shift 9
25	raise	Shift 16
25	try	Shift 15
25	zero?	Shift 11
26	(	Shift 4
26	-	Shift 3
26	car	Shift 13
26	cdr	Shift 14
26	identifier	Shift 6
26	if	Shift 5
26	integer_number	Shift 2
26	let	Shift 7
26	letrec	Shift 8
26	list	Shift 10
26	null?	Shift 12
26	proc	Shift 9
26	raise	Shift 16
26	try	Shift 15
26	zero?	Shift 11
27	(	Shift 4
27	-	Shift 3
27	car	Shift 13
27	cdr	Shift 14
27	identifier	Shift 6
27	if	Shift 5
27	integer_number	Shift 2
27	let	Shift 7
27	letrec	Shift 8
27	list	Shift 10
27	null?	Shift 12
27	proc	Shift 9
27	raise	Shift 16
27	try	Shift 15
27	zero?	Shift 11
28	(	Shift 4
28	-	Shift 3
28	car	Shift 13
28	cdr	Shift 14
28	identifier	Shift 6
28	if	Shift 5
28	integer_number	Shift 2
28	let	Shift 7
28	letrec	Shift 8
28	list	Shift 10
28	null?	Shift 12
28	proc	Shift 9
28	raise	Shift 16
28	try	Shift 15
28	zero?	Shift 11
29	catch	Shift 43
30	(	Reduce 18
30	)	Reduce 18
30	,	Reduce 18
30	-	Reduce 18
30	car	Reduce 18
30	catch	Reduce 18
30	cdr	Reduce 18
30	else	Reduce 18
30	identifier	Reduce 18
30	if	Reduce 18
30	in	Reduce 18
30	integer_number	Reduce 18
30	let	Reduce 18
30	letrec	Reduce 18
30	list	Reduce 18
30	null?	Reduce 18
30	proc	Reduce 18
30	raise	Reduce 18
30	then	Reduce 18
30	try	Reduce 18
30	zero?	Reduce 18
30	$	Reduce 18
31	,	Shift 44
32	)	Shift 45
33	(	Shift 4
33	-	Shift 3
33	car	Shift 13
33	cdr	Shift 14
33	identifier	Shift 6
33	if	Shift 5
33	integer_number	Shift 2
33	let	Shift 7
33	letrec	Shift 8
33	list	Shift 10
33	null?	Shift 12
33	proc	Shift 9
33	raise	Shift 16
33	try	Shift 15
33	zero?	Shift 11
34	(	Shift 4
34	-	Shift 3
34	car	Shift 13
34	cdr	Shift 14
34	identifier	Shift 6
34	if	Shift 5
34	integer_number	Shift 2
34	let	Shift 7
34	letrec	Shift 8
34	list	Shift 10
34	null?	Shift 12
34	proc	Shift 9
34	raise	Shift 16
34	try	Shift 15
34	zero?	Shift 11
35	identifier	Shift 48
36	)	Shift 49
37	)	Shift 50
38	)	Reduce 11
38	,	Shift 51
39	)	Shift 52
40	)	Shift 53
41	)	Shift 54
42	)	Shift 55
43	(	Shift 56
44	(	Shift 4
44	-	Shift 3
44	car	Shift 13
44	cdr	Shift 14
44	identifier	Shift 6
44	if	Shift 5
44	integer_number	Shift 2
44	let	Shift 7
44	letrec	Shift 8
44	list	Shift 10
44	null?	Shift 12
44	proc	Shift 9
44	raise	Shift 16
44	try	Shift 15
44	zero?	Shift 11
45	(	Reduce 9
45	)	Reduce 9
45	,	Reduce 9
45	-	Reduce 9
45	car	Reduce 9
45	catch	Reduce 9
45	cdr	Reduce 9
45	else	Reduce 9
45	identifier	Reduce 9
45	if	Reduce 9
45	in	Reduce 9
45	integer_number	Reduce 9
45	let	Reduce 9
45	letrec	Reduce 9
45	list	Reduce 9
45	null?	Reduce 9
45	proc	Reduce 9
45	raise	Reduce 9
45	then	Reduce 9
45	try	Reduce 9
45	zero?	Reduce 9
45	$	Reduce 9
46	else	Shift 58
47	in	Shift 59
48	)	Shift 60
49	(	Shift 4
49	-	Shift 3
49	car	Shift 13
49	cdr	Shift 14
49	identifier	Shift 6
49	if	Shift 5
49	integer_number	Shift 2
49	let	Shift 7
49	letrec	Shift 8
49	list	Shift 10
49	null?	Shift 12
49	proc	Shift 9
49	raise	Shift 16
49	try	Shift 15
49	zero?	Shift 11
50	(	Reduce 10
50	)	Reduce 10
50	,	Reduce 10
50	-	Reduce 10
50	car	Reduce 10
50	catch	Reduce 10
50	cdr	Reduce 10
50	else	Reduce 10
50	identifier	Reduce 10
50	if	Reduce 10
50	in	Reduce 10
50	integer_number	Reduce 10
50	let	Reduce 10
50	letrec	Reduce 10
50	list	Reduce 10
50	null?	Reduce 10
50	proc	Reduce 10
50	raise	Reduce 10
50	then	Reduce 10
50	try	Reduce 10
50	zero?	Reduce 10
50	$	Reduce 10
51	integer_number	Shift 38
52	(	Reduce 13
52	)	Reduce 13
52	,	Reduce 13
52	-	Reduce 13
52	car	Reduce 13
52	catch	Reduce 13
52	cdr	Reduce 13
52	else	Reduce 13
52	identifier	Reduce 13
52	if	Reduce 13
52	in	Reduce 13
52	integer_number	Reduce 13
52	let	Reduce 13
52	letrec	Reduce 13
52	list	Reduce 13
52	null?	Reduce 13
52	proc	Reduce 13
52	raise	Reduce 13
52	then	Reduce 13
52	try	Reduce 13
52	zero?	Reduce 13
52	$	Reduce 13
53	(	Reduce 14
53	)	Reduce 14
53	,	Reduce 14
53	-	Reduce 14
53	car	Reduce 14
53	catch	Reduce 14
53	cdr	Reduce 14
53	else	Reduce 14
53	identifier	Reduce 14
53	if	Reduce 14
53	in	Reduce 14
53	integer_number	Reduce 14
53	let	Reduce 14
53	letrec	Reduce 14
53	list	Reduce 14
53	null?	Reduce 14
53	proc	Reduce 14
53	raise	Reduce 14
53	then	Reduce 14
53	try	Reduce 14
53	zero?	Reduce 14
53	$	Reduce 14
54	(	Reduce 15
54	)	Reduce 15
54	,	Reduce 15
54	-	Reduce 15
54	car	Reduce 15
54	catch	Reduce 15
54	cdr	Reduce 15
54	else	Reduce 15
54	identifier	Reduce 15
54	if	Reduce 15
54	in	Reduce 15
54	integer_number	Reduce 15
54	let	Reduce 15
54	letrec	Reduce 15
54	list	Reduce 15
54	null?	Reduce 15
54	proc	Reduce 15
54	raise	Reduce 15
54	then	Reduce 15
54	try	Reduce 15
54	zero?	Reduce 15
54	$	Reduce 15
55	(	Reduce 16
55	)	Reduce 16
55	,	Reduce 16
55	-	Reduce 16
55	car	Reduce 16
55	catch	Reduce 16
55	cdr	Reduce 16
55	else	Reduce 16
55	identifier	Reduce 16
55	if	Reduce 16
55	in	Reduce 16
55	integer_number	Reduce 16
55	let	Reduce 16
55	letrec	Reduce 16
55	list	Reduce 16
55	null?	Reduce 16
55	proc	Reduce 16
55	raise	Reduce 16
55	then	Reduce 16
55	try	Reduce 16
55	zero?	Reduce 16
55	$	Reduce 16
56	identifier	Shift 63
57	)	Shift 64
58	(	Shift 4
58	-	Shift 3
58	car	Shift 13
58	cdr	Shift 14
58	identifier	Shift 6
58	if	Shift 5
58	integer_number	Shift 2
58	let	Shift 7
58	letrec	Shift 8
58	list	Shift 10
58	null?	Shift 12
58	proc	Shift 9
58	raise	Shift 16
58	try	Shift 15
58	zero?	Shift 11
59	(	Shift 4
59	-	Shift 3
59	car	Shift 13
59	cdr	Shift 14
59	identifier	Shift 6
59	if	Shift 5
59	integer_number	Shift 2
59	let	Shift 7
59	letrec	Shift 8
59	list	Shift 10
59	null?	Shift 12
59	proc	Shift 9
59	raise	Shift 16
59	try	Shift 15
59	zero?	Shift 11
60	=	Shift 67
61	(	Reduce 8
61	)	Reduce 8
61	,	Reduce 8
61	-	Reduce 8
61	car	Reduce 8
61	catch	Reduce 8
61	cdr	Reduce 8
61	else	Reduce 8
61	identifier	Reduce 8
61	if	Reduce 8
61	in	Reduce 8
61	integer_number	Reduce 8
61	let	Reduce 8
61	letrec	Reduce 8
61	list	Reduce 8
61	null?	Reduce 8
61	proc	Reduce 8
61	raise	Reduce 8
61	then	Reduce 8
61	try	Reduce 8
61	zero?	Reduce 8
61	$	Reduce 8
62	)	Reduce 12
63	)	Shift 68
64	(	Reduce 3
64	)	Reduce 3
64	,	Reduce 3
64	-	Reduce 3
64	car	Reduce 3
64	catch	Reduce 3
64	cdr	Reduce 3
64	else	Reduce 3
64	identifier	Reduce 3
64	if	Reduce 3
64	in	Reduce 3
64	integer_number	Reduce 3
64	let	Reduce 3
64	letrec	Reduce 3
64	list	Reduce 3
64	null?	Reduce 3
64	proc	Reduce 3
64	raise	Reduce 3
64	then	Reduce 3
64	try	Reduce 3
64	zero?	Reduce 3
64	$	Reduce 3
65	(	Reduce 4
65	)	Reduce 4
65	,	Reduce 4
65	-	Reduce 4
65	car	Reduce 4
65	catch	Reduce 4
65	cdr	Reduce 4
65	else	Reduce 4
65	identifier	Reduce 4
65	if	Reduce 4
65	in	Reduce 4
65	integer_number	Reduce 4
65	let	Reduce 4
65	letrec	Reduce 4
65	list	Reduce 4
65	null?	Reduce 4
65	proc	Reduce 4
65	raise	Reduce 4
65	then	Reduce 4
65	try	Reduce 4
65	zero?	Reduce 4
65	$	Reduce 4
66	(	Reduce 6
66	)	Reduce 6
66	,	Reduce 6
66	-	Reduce 6
66	car	Reduce 6
66	catch	Reduce 6
66	cdr	Reduce 6
66	else	Reduce 6
66	identifier	Reduce 6
66	if	Reduce 6
66	in	Reduce 6
66	integer_number	Reduce 6
66	let	Reduce 6
66	letrec	Reduce 6
66	list	Reduce 6
66	null?	Reduce 6
66	proc	Reduce 6
66	raise	Reduce 6
66	then	Reduce 6
66	try	Reduce 6
66	zero?	Reduce 6
66	$	Reduce 6
67	(	Shift 4
67	-	Shift 3
67	car	Shift 13
67	cdr	Shift 14
67	identifier	Shift 6
67	if	Shift 5
67	integer_number	Shift 2
67	let	Shift 7
67	letrec	Shift 8
67	list	Shift 10
67	null?	Shift 12
67	proc	Shift 9
67	raise	Shift 16
67	try	Shift 15
67	zero?	Shift 11
68	(	Shift 4
68	-	Shift 3
68	car	Shift 13
68	cdr	Shift 14
68	identifier	Shift 6
68	if	Shift 5
68	integer_number	Shift 2
68	let	Shift 7
68	letrec	Shift 8
68	list	Shift 10
68	null?	Shift 12
68	proc	Shift 9
68	raise	Shift 16
68	try	Shift 15
68	zero?	Shift 11
69	in	Shift 71
70	(	Reduce 17
70	)	Reduce 17
70	,	Reduce 17
70	-	Reduce 17
70	car	Reduce 17
70	catch	Reduce 17
70	cdr	Reduce 17
70	else	Reduce 17
70	identifier	Reduce 17
70	if	Reduce 17
70	in	Reduce 17
70	integer_number	Reduce 17
70	let	Reduce 17
70	letrec	Reduce 17
70	list	Reduce 17
70	null?	Reduce 17
70	proc	Reduce 17
70	raise	Reduce 17
70	then	Reduce 17
70	try	Reduce 17
70	zero?	Reduce 17
70	$	Reduce 17
71	(	Shift 4
71	-	Shift 3
71	car	Shift 13
71	cdr	Shift 14
71	identifier	Shift 6
71	if	Shift 5
71	integer_number	Shift 2
71	let	Shift 7
71	letrec	Shift 8
71	list	Shift 10
71	null?	Shift 12
71	proc	Shift 9
71	raise	Shift 16
71	try	Shift 15
71	zero?	Shift 11
72	(	Reduce 7
72	)	Reduce 7
72	,	Reduce 7
72	-	Reduce 7
72	car	Reduce 7
72	catch	Reduce 7
72	cdr	Reduce 7
72	else	Reduce 7
72	identifier	Reduce 7
72	if	Reduce 7
72	in	Reduce 7
72	integer_number	Reduce 7
72	let	Reduce 7
72	letrec	Reduce 7
72	list	Reduce 7
72	null?	Reduce 7
72	proc	Reduce 7
72	raise	Reduce 7
72	then	Reduce 7
72	try	Reduce 7
72	zero?	Reduce 7
72	$	Reduce 7
