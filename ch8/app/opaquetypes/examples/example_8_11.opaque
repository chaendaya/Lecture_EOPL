module ints1
    interface [opaque t
            zero : t
            succ : (t -> t)
            pred : (t -> t)
            iszero : (t -> bool)]  
    body [type t = int
                    zero = 0
                    succ = proc(x : t) -(x,-5)
                    pred = proc(x : t) -(x,5)
                    iszero = proc (x : t) zero?(x)]
                    
let z = from ints1 take zero
in let s = from ints1 take succ
in let p = from ints1 take pred
in let z? = from ints1 take iszero
in letrec int toint (x : from ints1 take t) =
                if (z? x) then 0
                    else -((toint (p x)), -1)
in (toint (s (s z)))