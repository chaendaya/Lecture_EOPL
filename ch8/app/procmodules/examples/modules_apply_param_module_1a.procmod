module makeints 
    interface
    ((m: [opaque t
                    zero : t
                    succ : (t -> t)
                    pred : (t -> t)
                    is_zero : (t -> bool)]) 
    => [opaque t
    zero : t
    succ : (t -> t)
    pred : (t -> t)
    is_zero : (t -> bool)])
    body 
    module_proc (m: [opaque t
                    zero : t
                    succ : (t -> t)
                    pred : (t -> t)
                    is_zero : (t -> bool)])
    [type t = from m take t
    zero = from m take zero
    succ = proc (x : t) 
                (from m take succ (from m take succ x))
    pred = proc (x : t) 
                (from m take pred (from m take pred x))
    is_zero = proc (x : t) (from m take is_zero x)
    ]

module ints_1
    interface 
    [opaque t
    zero : t
    succ : (t -> t)
    pred : (t -> t)
    is_zero : (t -> bool)]  
    body 
    [type t = int
    zero = 0
    succ = proc(x : t) -(x,2)
    pred = proc(x : t) -(x,-2)
    is_zero = proc (x : t) zero?(x)]

module ints_2
    interface 
    [opaque t
    zero : t
    succ : (t -> t)
    pred : (t -> t)
    is_zero : (t -> bool)]  
    body
    (makeints ints_1)


(from ints_2 take succ 
    (from ints_2 take succ  
    from ints_2 take zero))