module maker1
    interface
    ((m1 : [opaque t
            s : (t -> t)])
        => ((m2 : [transparent t = from m1 take t])
            => [transparent t = from m1 take t
                d : (t -> t)]))
    body
    module_proc
        (p1 : [opaque t
            s : (t -> t)])
        module_proc
        (p2 : [transparent t = from p1 take t])
        [type t = from p1 take t
        d = proc (x : t) (from p1 take s (from p1 take s x))]

module m0
interface
    [opaque t
    s : (t -> t)]
body
    [type t = int
    s = proc (u : t) -(u, -1)]

module m1
interface
    ((m2 : % [opaque t]
    [transparent t = from m0 take t])
    => [transparent t = from m2 take t
        d : (t -> t)])
body
    (maker1 m0)

    module m2
    interface
    [opaque t
    d : (t -> t)]
    body
    (m1 m0)

33